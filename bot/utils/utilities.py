import re
import random

from aiogram.dispatcher import FSMContext
from bot.service import es
from bot.utils.models import Product


async def is_valid_name(name: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\- ]+$', name):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã
    if re.search(r'\d', name):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∏–∑ 2 –±—É–∫–≤
    words = name.split()
    for word in words:
        if len(word) < 2:
            return False
    return True


async def is_valid_price(price: str):
    # symbols_list = [char for char in price if char.isnumeric()]
    # _clear_price = ''.join(symbols_list)
    _clear_price = float(price)
    return _clear_price


async def is_valid_quantity(quantity: str):
    if quantity.lower() == "–Ω–µ—Ç":
        return None
    else:
        return int(quantity)


async def get_data(key: str, state: FSMContext):
    async with state.proxy() as storage:
        return storage[key]


async def generate_article() -> int:
    while True:
        article = int(random.randint(100000, 999999))
        if await es.check_in_products_index(field="article", value=article):
            continue
        else:
            return article


async def generate_page_product(products: list[Product]) -> str:
    message: str = "<u>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞</u>:\n\n"
    for product in products:
        line = f"""üîπ<b>{product.product_name}</b>\n–¶–µ–Ω–∞: <b>{product.price} ‚ÇΩ</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{product.quantity}</b>\n–ê—Ä—Ç–∏–∫—É–ª: <code>{product.article}</code>\n\n"""
        message += line
    return message

# –î–ª—è RedisStorage
# import time
# from bot.service import storage
# –ó–∞–¥–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# state_ttl = 3600


# async def set_state(user_id, chat_id, value):
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
#     await storage.set_data(chat=chat_id, user=user_id, data={'state': value, 'timestamp': time.time()})
#
#
# async def get_state(user_id, chat_id):
#     data = await storage.get_data(user=user_id, chat=chat_id)
#     if data:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#         if time.time() - data['timestamp'] > state_ttl:
#             # –ï—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#             await storage.reset_data(user_id)
#             return None
#         else:
#             return data['state']
#     else:
#         return None
