import re
import random

from aiogram.dispatcher import FSMContext
from database.storage import es
from bot.utils.models import Product
from loguru import logger


async def is_valid_name(name: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\- ]+$', name):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã
    if re.search(r'\d', name):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∏–∑ 2 –±—É–∫–≤
    words = name.split()
    for word in words:
        if len(word) < 2:
            return False
    return True


async def is_valid_price(price: str):
    # symbols_list = [char for char in price if char.isnumeric()]
    # _clear_price = ''.join(symbols_list)
    _clear_price = float(price)
    return _clear_price


async def is_valid_quantity(quantity: str):
    if quantity.lower() == "–Ω–µ—Ç":
        return None
    else:
        return int(quantity)


async def get_data(key: str, state: FSMContext):
    async with state.proxy() as storage:
        return storage[key]


async def generate_article() -> int:
    while True:
        article = int(random.randint(100000, 999999))
        if await es.check_in_products_index(field="article", value=article):
            continue
        else:
            return article


async def preprocessing_price_list(price_list: str, trader: int):
    # TODO –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    products_correct = []
    uncorrected_rows = []
    price_list_split = price_list.split("\n")
    price_list_split = [x for x in price_list_split if x.strip()]
    for row in price_list_split:
        _product = Product()
        _row = row.split("-")
        try:
            _product.product_name = str(_row[0].strip())
            _product.price = float(_row[1].strip().replace(".", "").replace(",", ""))
            _product.quantity = int(_row[2].strip()) if int(_row[2].strip()) != 0 else None
            _product.article = await generate_article()
            _product.trader_id = int(trader)
            products_correct.append(_product)
        except (Exception,) as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ : {exc}")
            uncorrected_rows.append(row)
    return products_correct, uncorrected_rows


async def generate_page_product(products: list[Product]) -> str:
    message: str = "<u>üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</u>:\n\n"
    for product in products:
        line = f"""üîπ<b>{product.product_name}</b>\n–¶–µ–Ω–∞: <b>{product.price} ‚ÇΩ</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{product.quantity}</b>\n–ê—Ä—Ç–∏–∫—É–ª: <code>{product.article}</code>\n\n"""
        message += line
    return message


async def generate_message_with_uncorrected_rows(rows: list):
    message: str = """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:\n\n"""
    for row in rows:
        message += row+"\n"
    return message
