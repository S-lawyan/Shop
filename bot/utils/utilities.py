import re

from aiogram.dispatcher import FSMContext
from bot.utils.models import Product


async def is_valid_name(name: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\- ]+$', name):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã
    if re.search(r'\d', name):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∏–∑ 2 –±—É–∫–≤
    words = name.split()
    for word in words:
        if len(word) < 2:
            return False
    return True


async def get_data(key: str, state: FSMContext):
    async with state.proxy() as storage:
        return storage[key]


async def generate_page_product(products: list[Product]) -> str:
    message: str = f"""<u>–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞</u>:\n\n"""
    for product in products:
        line = f"""üîπ<b>{product.product_name}</b>\n–¶–µ–Ω–∞: <b>{product.price} ‚ÇΩ</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{product.quantity}</b>\n–ê—Ä—Ç–∏–∫—É–ª: <code>{product.article}</code>\n<a href="tg://user?id={product.trader_id}">–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É</a>\n\n"""
        message += line
    return message
